{"version":3,"file":"static/js/1886.8099c001.chunk.js","mappings":"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","sources":["views/Settings/Setting.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { getRole, getSetting, updateSetting } from 'src/redux/api/api'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport swal from 'sweetalert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useForm } from 'react-hook-form'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormFeedback,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CSpinner,\n} from '@coreui/react'\n\nconst Setting = () => {\n  const [setting, setSetting] = useState({})\n  const [isLoading, setIsLoading] = useState(false)\n  const [permission, setPermissions] = useState([])\n  const auth = useSelector((state) => state.auth)\n  const dispatch = useDispatch()\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm()\n\n  const getsetting = async () => {\n    try {\n      setIsLoading(true)\n      const res = await getSetting()\n      const data = res.data.info\n\n      setIsLoading(false)\n      setValue('workingtime', data.workingtime)\n      setValue('breaktime', data.breaktime)\n      setValue('rediusmiter', data.rediusmiter)\n      setSetting(data)\n    } catch (error) {\n      console.log(error)\n      setIsLoading(false)\n      toast.error(error.response?.data?.message || 'An error occurred')\n    }\n  }\n\n  const onSubmit = async (data) => {\n    try {\n      setIsLoading(true)\n      const res = await updateSetting(data)\n      getsetting()\n      setIsLoading(false)\n      toast.success('Update Successfully')\n    } catch (error) {\n      console.log(error)\n      setIsLoading(false)\n      toast.error(error.response?.data?.message || 'An error occurred')\n    }\n  }\n\n  useEffect(() => {\n    const fetchPermissions = async () => {\n      await getRole(dispatch)\n      setPermissions(auth.permission)\n    }\n    fetchPermissions()\n  }, [])\n  useEffect(() => {\n    getsetting()\n  }, [])\n\n  return (\n    <>\n      <div className=\"bg-light min-vh-100\">\n        <ToastContainer />\n        <CContainer className=\"mt-3\">\n          <CRow>\n            <CCol md={6}>\n              <CCard>\n                <CCardHeader>Setting Form</CCardHeader>\n                <CCardBody>\n                  <CForm className=\"row g-3\" onSubmit={handleSubmit(onSubmit)}>\n                    <CCol xl={8} md={12}>\n                      <CFormLabel> Working Time</CFormLabel>\n                      <CInputGroup>\n                        <CFormInput\n                          type=\"text\"\n                          placeholder=\"Working Time in minutes\"\n                          {...register('workingtime', { required: 'Working Time is required' })}\n                          invalid={!!errors.workingtime}\n                        />\n\n                        <CInputGroupText>Minutes</CInputGroupText>\n                        <CFormFeedback invalid>{errors.workingtime?.message}</CFormFeedback>\n                      </CInputGroup>\n                    </CCol>\n                    <CCol xl={8} md={12}>\n                      <CFormLabel> Break Time</CFormLabel>\n                      <CInputGroup>\n                        <CFormInput\n                          type=\"text\"\n                          placeholder=\"Break Time in minutes\"\n                          {...register('breaktime', { required: 'Break Time is required' })}\n                          invalid={!!errors.breaktime}\n                        />\n\n                        <CInputGroupText>Minutes</CInputGroupText>\n                        <CFormFeedback invalid>{errors.breaktime?.message}</CFormFeedback>\n                      </CInputGroup>\n                    </CCol>\n                    <CCol xl={8} md={12}>\n                      <CFormLabel> Check Out redius</CFormLabel>\n                      <CInputGroup>\n                        <CFormInput\n                          type=\"text\"\n                          placeholder=\"Check Out redius\"\n                          {...register('rediusmiter', { required: 'Check Out redius is required' })}\n                          invalid={!!errors.rediusmiter}\n                        />\n\n                        <CInputGroupText>Miter</CInputGroupText>\n                        <CFormFeedback invalid>{errors.rediusmiter?.message}</CFormFeedback>\n                      </CInputGroup>\n                    </CCol>\n                    {Array.isArray(permission) && permission.includes('setting.edit') && (\n                      <CCol md={12} className=\"text-center submitButton\">\n                        {isLoading ? (\n                          <CButton disabled>\n                            <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" />\n                            Loading...\n                          </CButton>\n                        ) : (\n                          <CButton type=\"submit\" className=\"AddButton\">\n                            Update\n                          </CButton>\n                        )}\n                      </CCol>\n                    )}\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </CContainer>\n      </div>\n    </>\n  )\n}\n\nexport default Setting\n"],"names":["Setting","_errors$workingtime","_errors$breaktime","_errors$rediusmiter","setting","setSetting","useState","isLoading","setIsLoading","permission","setPermissions","auth","useSelector","state","dispatch","useDispatch","register","handleSubmit","formState","errors","setValue","useForm","getsetting","async","data","getSetting","info","workingtime","breaktime","rediusmiter","error","_error$response","_error$response$data","console","log","toast","response","message","useEffect","getRole","fetchPermissions","_jsx","_Fragment","children","_jsxs","className","ToastContainer","CContainer","CRow","CCol","md","CCard","CCardHeader","CCardBody","CForm","onSubmit","updateSetting","success","_error$response2","_error$response2$data","xl","CFormLabel","CInputGroup","CFormInput","type","placeholder","required","invalid","CInputGroupText","CFormFeedback","Array","isArray","includes","CButton","disabled","CSpinner","component","size"],"sourceRoot":""}