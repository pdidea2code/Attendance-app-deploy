{"version":3,"file":"static/js/6423.aeb02457.chunk.js","mappings":"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","sources":["views/user/Userform.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormFeedback,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CRow,\n  CSpinner,\n} from '@coreui/react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { addAdmin, updateAdmin, getallRole } from 'src/redux/api/api' // Ensure updateAdmin is imported\n\nconst Userform = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useForm()\n  const { state } = useLocation()\n  const [isUpdate, setIsUpdate] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [image, setImage] = useState('')\n  const [roles, setRoles] = useState([])\n  const [selectedRole, setSelectedRole] = useState('')\n  const navigate = useNavigate()\n\n  const handleFileChange = (e) => {\n    const files = e.target.files[0]\n    if (files) {\n      const imageUrl = URL.createObjectURL(files)\n      setImage(imageUrl)\n    } else {\n      setImage(null)\n    }\n  }\n\n  const getRoles = async () => {\n    try {\n      const res = await getallRole()\n      const data = res.data.info\n      setRoles(data)\n    } catch (error) {\n      console.log(error)\n      toast.error(error.response?.data?.message || 'An error occurred while fetching roles')\n    }\n  }\n\n  const onSubmit = (data) => {\n    setIsLoading(true)\n    let formData = new FormData()\n    Object.keys(data).forEach((key) => {\n      if (key === 'image' && data[key][0]) {\n        formData.append(key, data[key][0])\n      } else {\n        formData.append(key, data[key])\n      }\n    })\n\n    formData.append('role', selectedRole)\n\n    isUpdate === ''\n      ? addAdmin(formData)\n          .then((res) => {\n            setIsLoading(false)\n            if (res.status === 200) {\n              navigate('/user')\n            }\n          })\n          .catch((error) => {\n            setIsLoading(false)\n            console.log(error)\n            const errorMsg = error.response?.data?.message || 'Something went wrong'\n            toast.error(errorMsg)\n          })\n      : updateAdmin(isUpdate, formData)\n          .then((res) => {\n            setIsLoading(false)\n            if (res.status === 200) {\n              navigate('/user')\n            }\n          })\n          .catch((error) => {\n            setIsLoading(false)\n            console.log(error)\n            const errorMsg = error.response?.data?.message || 'Something went wrong'\n            toast.error(errorMsg)\n          })\n  }\n\n  useEffect(() => {\n    getRoles()\n\n    if (state?.editData) {\n      setIsUpdate(state.editData._id)\n      setImage(state.imageUrl + state.editData.image)\n      setValue('name', state.editData.name)\n      setValue('email', state.editData.email)\n      setSelectedRole(state.editData.role_name) // Assuming roleId is stored in editData\n      setValue('role', state.editData.role_name) // Set the role field in the form\n    }\n  }, [state, setValue])\n\n  const password = watch('password')\n\n  return (\n    <div className=\"bg-light min-vh-100\">\n      <ToastContainer />\n      <CContainer className=\"mt-3\">\n        <CRow>\n          <CCol md={8}>\n            <CCard>\n              <CCardHeader>User Form</CCardHeader>\n              <CCardBody>\n                <CForm className=\"row g-3\" onSubmit={handleSubmit(onSubmit)}>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Name</CFormLabel>\n                    <CFormInput\n                      type=\"text\"\n                      placeholder=\"Name\"\n                      {...register('name', { required: 'Name is required' })}\n                      invalid={!!errors.name}\n                    />\n                    <CFormFeedback invalid>{errors.name?.message}</CFormFeedback>\n                  </CCol>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Email</CFormLabel>\n                    <CFormInput\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      {...register('email', { required: 'Email is required' })}\n                      invalid={!!errors.email}\n                    />\n                    <CFormFeedback invalid>{errors.email?.message}</CFormFeedback>\n                  </CCol>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Password</CFormLabel>\n                    <CFormInput\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      {...register('password', {\n                        required: isUpdate === '' ? 'Password is required' : false,\n                      })}\n                      invalid={!!errors.password}\n                    />\n                    {errors.password && (\n                      <CFormFeedback invalid>{errors.password.message}</CFormFeedback>\n                    )}\n                  </CCol>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Confirm Password</CFormLabel>\n                    <CFormInput\n                      type=\"password\"\n                      placeholder=\"Confirm Password\"\n                      {...register('confpassword', {\n                        validate: (value) => {\n                          if (password) {\n                            return value === password || 'Passwords do not match'\n                          }\n                        },\n                      })}\n                      invalid={!!errors.confpassword}\n                    />\n                    {errors.confpassword && (\n                      <CFormFeedback invalid>{errors.confpassword.message}</CFormFeedback>\n                    )}\n                  </CCol>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Role</CFormLabel>\n                    <CFormSelect\n                      {...register('role', { required: 'Role is required' })} // Register role as required\n                      onChange={(e) => {\n                        setSelectedRole(e.target.value)\n                        setValue('role', e.target.value) // Update form value on change\n                      }}\n                      value={selectedRole} // Set selected role from state\n                      invalid={!!errors.role}\n                    >\n                      <option value=\"\">Select Role</option>\n                      {roles.map((role) => (\n                        <option key={role._id} value={role.name}>\n                          {' '}\n                          {/* Use role.id as value */}\n                          {role.name}\n                        </option>\n                      ))}\n                    </CFormSelect>\n                    {errors.role && <CFormFeedback invalid>{errors.role.message}</CFormFeedback>}\n                  </CCol>\n                  <CCol xl={4} md={12}>\n                    <CFormLabel>Image</CFormLabel>\n                    <CFormInput\n                      type=\"file\"\n                      {...register('image', {\n                        required: image === '' ? 'Image is required' : false,\n                      })}\n                      accept=\"image/*\"\n                      name=\"image\"\n                      onChange={handleFileChange}\n                    />\n                    {errors.image && <CFormFeedback invalid>{errors.image.message}</CFormFeedback>}\n                  </CCol>\n\n                  <CCol md={5}>\n                    {image && (\n                      <>\n                        <p>Image Preview</p>\n                        <div className=\"mb-4 text-center\">\n                          <img\n                            src={image}\n                            alt=\"Profile Preview\"\n                            style={{\n                              width: '150px',\n                              height: '150px',\n                              objectFit: 'cover',\n                              borderRadius: '50%',\n                            }}\n                          />\n                        </div>\n                      </>\n                    )}\n                  </CCol>\n                  <CCol md={12} className=\"text-center submitButton\">\n                    {isLoading ? (\n                      <CButton disabled>\n                        <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" />\n                        Loading...\n                      </CButton>\n                    ) : (\n                      <CButton type=\"submit\" className=\"AddButton\">\n                        {isUpdate ? 'Update' : 'Add'}\n                      </CButton>\n                    )}\n                  </CCol>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Userform\n"],"names":["Userform","_errors$name","_errors$email","register","handleSubmit","formState","errors","setValue","watch","useForm","state","useLocation","isUpdate","setIsUpdate","useState","isLoading","setIsLoading","image","setImage","roles","setRoles","selectedRole","setSelectedRole","navigate","useNavigate","useEffect","async","data","getallRole","info","error","_error$response","_error$response$data","console","log","toast","response","message","getRoles","editData","_id","imageUrl","name","email","role_name","password","_jsxs","className","children","_jsx","ToastContainer","CContainer","CRow","CCol","md","CCard","CCardHeader","CCardBody","CForm","onSubmit","formData","FormData","Object","keys","forEach","key","append","addAdmin","then","res","status","catch","_error$response2","_error$response2$data","errorMsg","updateAdmin","_error$response3","_error$response3$data","xl","CFormLabel","CFormInput","type","placeholder","required","invalid","CFormFeedback","validate","value","confpassword","CFormSelect","onChange","e","target","role","map","accept","files","URL","createObjectURL","_Fragment","src","alt","style","width","height","objectFit","borderRadius","CButton","disabled","CSpinner","component","size"],"sourceRoot":""}