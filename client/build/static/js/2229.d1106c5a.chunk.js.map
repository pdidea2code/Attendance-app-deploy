{"version":3,"file":"static/js/2229.d1106c5a.chunk.js","mappings":"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","sources":["views/employee/Employeeform.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormFeedback,\n  CFormInput,\n  CFormLabel,\n  CRow,\n  CSpinner,\n} from '@coreui/react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { addEmplloyee, getMapApikey, updateEmplloyee } from 'src/redux/api/api'\n\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api'\n\nconst Employeeform = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useForm()\n  const { state } = useLocation()\n  const [isUpdate, setIsUpdate] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [image, setImage] = useState('')\n  const [mapapikey, setMapApiKey] = useState('')\n  const navigate = useNavigate()\n\n  const getmapapikey = async () => {\n    try {\n      setIsLoading(true)\n      const res = await getMapApikey()\n\n      if (res.status === 200) {\n        setIsLoading(false)\n        setMapApiKey(res.data.info)\n      }\n    } catch (error) {\n      setIsLoading(false)\n      const errorMsg = error.response?.data?.message || 'Something went wrong'\n      toast.error(errorMsg)\n    }\n  }\n\n  const handleFileChange = (e) => {\n    const files = e.target.files[0]\n    if (files) {\n      const imageUrl = URL.createObjectURL(files)\n      setImage(imageUrl)\n    } else {\n      setImage(null)\n    }\n  }\n\n  const onSubmit = (data) => {\n    setIsLoading(true)\n    let formData = new FormData()\n    Object.keys(data).forEach(function (key) {\n      if (key === 'image') {\n        if (data[key][0] !== undefined) {\n          formData.append(key, data[key][0])\n        }\n      } else if (data[key] === '') {\n      } else {\n        formData.append(key, data[key])\n      }\n    })\n    isUpdate === ''\n      ? addEmplloyee(formData)\n          .then((res) => {\n            setIsLoading(false)\n            if (res.status === 200) {\n              navigate('/employee')\n            }\n          })\n          .catch((error) => {\n            // console.log(error)\n            setIsLoading(false)\n            const errorMsg = error.response?.data?.message || 'Something went wrong'\n            toast.error(errorMsg)\n          })\n      : updateEmplloyee(isUpdate, formData)\n          .then((res) => {\n            setIsLoading(false)\n            if (res.status === 200) {\n              navigate('/employee')\n            }\n          })\n          .catch((error) => {\n            setIsLoading(false)\n            // console.log(error)\n            const errorMsg = error.response?.data?.message || 'Something went wrong'\n            toast.error(errorMsg)\n          })\n  }\n\n  const center = {\n    lat: Number(state?.editData?.workplaceLatitude),\n    lng: Number(state?.editData?.workplaceLongitude),\n  }\n\n  const [location, setLocation] = useState(center)\n  const [marker, setMarker] = useState(center)\n\n  const handleMapClick = (event) => {\n    // console.log(event)\n    setLocation({\n      lat: event.latLng.lat(),\n      lng: event.latLng.lng(),\n    })\n    setMarker({\n      lat: event.latLng.lat(),\n      lng: event.latLng.lng(),\n    })\n\n    setValue('workplaceLatitude', event.latLng.lat())\n    setValue('workplaceLongitude', event.latLng.lng())\n  }\n\n  const mapContainerStyle = {\n    height: '400px',\n    width: 'auto',\n  }\n\n  const formatDateToYMD = (date) => {\n    if (!date) return ''\n    const parts = date.split('/')\n\n    if (parts.length === 3) {\n      const [day, month, year] = parts\n      return `${year}-${month}-${day}`\n    }\n    return ''\n  }\n\n  useEffect(() => {\n    getmapapikey()\n    if (state?.editData) {\n      // console.log(state.editData.dob)\n      setIsUpdate(state.editData._id)\n      setImage(state.imageUrl + state.editData.image)\n      setValue('name', state.editData.name)\n      setValue('email', state.editData.email)\n      setValue('user_id', state.editData.user_id)\n      setValue('position', state.editData.position)\n      setValue('phoneno', state.editData.phoneno)\n      setValue('workplaceLatitude', state.editData.workplaceLatitude)\n      setValue('workplaceLongitude', state.editData.workplaceLongitude)\n      // setValue('dob', formatDateToYMD(state.editData.dob))\n      setValue('dob', state.editData.dob)\n      // setValue('dob', '2005/6/20')\n    }\n  }, [state, setValue])\n\n  const password = watch('password')\n\n  return (\n    <div className=\"bg-light min-vh-100\">\n      <ToastContainer />\n      <CContainer className=\"mt-3\">\n        <CRow>\n          <CCol md={8}>\n            <CCard>\n              <CCardHeader>{isUpdate ? 'Update' : 'Add'} Form</CCardHeader>\n              <CCardBody>\n                <CForm className=\"row g-3\" onSubmit={handleSubmit(onSubmit)}>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Name</CFormLabel>\n                    <CFormInput\n                      type=\"text\"\n                      placeholder=\"Jone Doe\"\n                      {...register('name', { required: 'Name is required' })}\n                      invalid={!!errors.name}\n                    />\n                    <CFormFeedback invalid>{errors.name?.message}</CFormFeedback>\n                  </CCol>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Email</CFormLabel>\n                    <CFormInput\n                      type=\"email\"\n                      placeholder=\"example@domain.com\"\n                      {...register('email', { required: 'Email is required' })}\n                      invalid={!!errors.email}\n                    />\n                    <CFormFeedback invalid>{errors.email?.message}</CFormFeedback>\n                  </CCol>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Password</CFormLabel>\n                    <CFormInput\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      {...register('password', {\n                        required: isUpdate === '' ? 'Password is required' : false,\n                        minLength: {\n                          value: 8,\n                          message: 'Password must be at least 8 characters long',\n                        },\n                        validate: {\n                          validatePassword: (value) => {\n                            if (!value) return true // Skip validation if no value is entered\n\n                            const hasUpperCase = /[A-Z]/.test(value)\n                            const hasLowerCase = /[a-z]/.test(value)\n                            const hasNumber = /[0-9]/.test(value)\n                            const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(value)\n\n                            if (!hasUpperCase) {\n                              return 'Password must contain at least one uppercase letter'\n                            }\n                            if (!hasLowerCase) {\n                              return 'Password must contain at least one lowercase letter'\n                            }\n                            if (!hasNumber) {\n                              return 'Password must contain at least one number'\n                            }\n                            if (!hasSpecialChar) {\n                              return 'Password must contain at least one special character'\n                            }\n\n                            return true // If all validations pass\n                          },\n                        },\n                      })}\n                      invalid={!!errors.password}\n                    />\n\n                    {errors.password && (\n                      <CFormFeedback invalid>{errors.password.message}</CFormFeedback>\n                    )}\n                  </CCol>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Confirm Password</CFormLabel>\n                    <CFormInput\n                      type=\"password\"\n                      placeholder=\"Confirm Password\"\n                      {...register('confpassword', {\n                        validate: (value) => {\n                          if (password) {\n                            return value === password || 'Passwords do not match'\n                          }\n                        },\n                      })}\n                      invalid={!!errors.confpassword}\n                    />\n                    {errors.confpassword && (\n                      <CFormFeedback invalid>{errors.confpassword.message}</CFormFeedback>\n                    )}\n                  </CCol>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Workplace Latitude</CFormLabel>\n                    <CFormInput\n                      type=\"number\"\n                      step=\"any\"\n                      placeholder=\"21.230449\"\n                      {...register('workplaceLatitude', {\n                        required: 'workplace Latitude is required',\n                      })}\n                      invalid={!!errors.workplaceLatitude}\n                    />\n                    <CFormFeedback invalid>{errors.workplaceLatitude?.message}</CFormFeedback>\n                  </CCol>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Workplace Longitude</CFormLabel>\n                    <CFormInput\n                      type=\"number\"\n                      step=\"any\"\n                      placeholder=\"72.900889\"\n                      {...register('workplaceLongitude', {\n                        required: 'workplace Longitude is required',\n                      })}\n                      invalid={!!errors.workplaceLongitude}\n                    />\n                    <CFormFeedback invalid>{errors.workplaceLongitude?.message}</CFormFeedback>\n                  </CCol>\n                  <CCol xl={12} md={12}>\n                    <LoadScript googleMapsApiKey={mapapikey}>\n                      <GoogleMap\n                        mapContainerStyle={mapContainerStyle}\n                        center={location}\n                        zoom={12}\n                        onClick={handleMapClick}\n                      >\n                        {marker && <Marker position={marker} />}\n                      </GoogleMap>\n                      {/* <div>\n                        <h2>Selected Location</h2>\n                        <p>Latitude: {location.lat}</p>\n                        <p>Longitude: {location.lng}</p>\n                      </div> */}\n                    </LoadScript>\n                  </CCol>\n                  <CCol xl={4} md={12}>\n                    <CFormLabel>User ID</CFormLabel>\n                    <CFormInput\n                      type=\"text\"\n                      placeholder=\"01\"\n                      {...register('user_id', { required: 'User ID is required' })}\n                      invalid={!!errors.user_id}\n                    />\n                    <CFormFeedback invalid>{errors.user_id?.message}</CFormFeedback>\n                  </CCol>\n                  <CCol xl={4} md={12}>\n                    <CFormLabel>Position</CFormLabel>\n                    <CFormInput\n                      type=\"text\"\n                      placeholder=\"Software Engineer\"\n                      {...register('position', { required: 'Position is required' })}\n                      invalid={!!errors.position}\n                    />\n                    <CFormFeedback invalid>{errors.position?.message}</CFormFeedback>\n                  </CCol>\n                  <CCol xl={4} md={12}>\n                    <CFormLabel>Phone No</CFormLabel>\n                    <CFormInput\n                      type=\"tel\"\n                      placeholder=\"9999999999\"\n                      {...register('phoneno', {\n                        required: 'Phone No is required',\n                        pattern: {\n                          value: /^[0-9]{10}$/,\n                          message: 'Phone No must be exactly 10 digits',\n                        },\n                      })}\n                      invalid={!!errors.phoneno}\n                    />\n                    <CFormFeedback invalid>{errors.phoneno?.message}</CFormFeedback>\n                  </CCol>\n                  <CCol xl={4} md={12}>\n                    <CFormLabel>Date of birth</CFormLabel>\n                    <CFormInput\n                      type=\"date\"\n                      {...register('dob', {\n                        required: 'Date of birth No is required',\n                      })}\n                      invalid={!!errors.dob}\n                    />\n                    <CFormFeedback invalid>{errors.dob?.message}</CFormFeedback>\n                  </CCol>\n                  <CCol xl={4} md={12}>\n                    <CFormLabel>Image</CFormLabel>\n                    <CFormInput\n                      type=\"file\"\n                      {...register('image', {\n                        required: isUpdate === '' ? 'Image is required' : false,\n                      })}\n                      accept=\"image/*\"\n                      name=\"image\"\n                      onChange={handleFileChange}\n                    />\n                    {errors.image && <CFormFeedback invalid>{errors.image.message}</CFormFeedback>}\n                  </CCol>\n\n                  <CCol md={4}>\n                    {image && (\n                      <>\n                        <p>Image Preview</p>\n                        <div className=\"mb-4 text-center\">\n                          <img\n                            src={image}\n                            alt=\"Profile Preview\"\n                            style={{\n                              width: '150px',\n                              height: '150px',\n                              objectFit: 'cover',\n                              borderRadius: '50%',\n                            }}\n                          />\n                        </div>\n                      </>\n                    )}\n                  </CCol>\n\n                  <CCol md={12} className=\"text-center submitButton\">\n                    {isLoading ? (\n                      <CButton disabled>\n                        <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" />\n                        Loading...\n                      </CButton>\n                    ) : (\n                      <CButton type=\"submit\" className=\"AddButton\">\n                        {isUpdate === '' ? 'Add' : 'Update'}\n                      </CButton>\n                    )}\n                  </CCol>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Employeeform\n"],"names":["Employeeform","_state$editData","_state$editData2","_errors$name","_errors$email","_errors$workplaceLati","_errors$workplaceLong","_errors$user_id","_errors$position","_errors$phoneno","_errors$dob","register","handleSubmit","formState","errors","setValue","watch","useForm","state","useLocation","isUpdate","setIsUpdate","useState","isLoading","setIsLoading","image","setImage","mapapikey","setMapApiKey","navigate","useNavigate","center","lat","Number","editData","workplaceLatitude","lng","workplaceLongitude","location","setLocation","marker","setMarker","useEffect","async","res","getMapApikey","status","data","info","error","_error$response","_error$response$data","errorMsg","response","message","toast","getmapapikey","_id","imageUrl","name","email","user_id","position","phoneno","dob","password","_jsxs","className","children","_jsx","ToastContainer","CContainer","CRow","CCol","md","CCard","CCardHeader","CCardBody","CForm","onSubmit","formData","FormData","Object","keys","forEach","key","undefined","append","addEmplloyee","then","catch","_error$response2","_error$response2$data","updateEmplloyee","_error$response3","_error$response3$data","xl","CFormLabel","CFormInput","type","placeholder","required","invalid","CFormFeedback","minLength","value","validate","validatePassword","hasUpperCase","test","hasLowerCase","hasNumber","hasSpecialChar","confpassword","step","LoadScript","googleMapsApiKey","GoogleMap","mapContainerStyle","height","width","zoom","onClick","event","latLng","Marker","pattern","accept","onChange","e","files","target","URL","createObjectURL","_Fragment","src","alt","style","objectFit","borderRadius","CButton","disabled","CSpinner","component","size"],"sourceRoot":""}