{"version":3,"file":"static/js/6466.96d443da.chunk.js","mappings":"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","sources":["views/role/Roleform.js"],"sourcesContent":["import {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormCheck,\n  CFormFeedback,\n  CFormInput,\n  CFormLabel,\n  CRow,\n  CSpinner,\n} from '@coreui/react'\nimport { useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { addRole, changepermission, getPermission } from 'src/redux/api/api'\n\nconst Roleform = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch,\n    setError,\n  } = useForm()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const navigate = useNavigate()\n  const [permissions, setPermissions] = useState([])\n  const [groupedPermissions, setGroupedPermissions] = useState({})\n  const [isUpdate, setIsUpdata] = useState('')\n  const [selectAll, setSelectAll] = useState(false)\n  const [groupSelection, setGroupSelection] = useState({})\n  const { state } = useLocation()\n\n  const onSubmit = async (data) => {\n    const selectedPermissions =\n      Object.keys(data)\n        .filter((key) => key.startsWith('permission_') && data[key] === true)\n        .map((key) => key.replace('permission_', '')) || []\n\n    setIsLoading(true)\n    try {\n      if (isUpdate !== '') {\n        const datas = {\n          name: data.name,\n          id: isUpdate,\n          permission: selectedPermissions,\n        }\n        const res = await changepermission(datas)\n        if (res.data.info) {\n          navigate('/role')\n        }\n      } else {\n        const datas = {\n          name: data.name,\n          permission: selectedPermissions,\n        }\n        const res = await addRole(datas)\n        if (res.data.info) {\n          navigate('/role')\n        }\n      }\n    } catch (error) {\n      console.log(error)\n      toast.error(error?.response?.data?.message || 'An unknown error occurred')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const getPermissionData = async () => {\n    setIsLoading(true)\n    try {\n      const res = await getPermission()\n      const data = res.data.info\n\n      const grouped = data.reduce((acc, perm) => {\n        const label = perm.name.split('.')[0]\n        if (!acc[label]) {\n          acc[label] = []\n        }\n        acc[label].push(perm)\n        return acc\n      }, {})\n      setGroupedPermissions(grouped)\n\n      // Initialize groupSelection state to manage group checkboxes\n      const groupSelectionInit = Object.keys(grouped).reduce((acc, group) => {\n        acc[group] = false\n        return acc\n      }, {})\n      setGroupSelection(groupSelectionInit)\n    } catch (error) {\n      toast.error(error?.response?.data?.message || 'Error occurred')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await getPermissionData()\n      if (state.editData) {\n        setIsUpdata(state.editData._id)\n        setValue('name', state.editData.name)\n      }\n    }\n    fetchData()\n  }, [state, setValue])\n\n  // Handle Select All permissions checkbox\n  const handleSelectAll = (e) => {\n    const checked = e.target.checked\n    setSelectAll(checked)\n\n    // Update the form with all permission checkboxes\n    Object.keys(groupedPermissions).forEach((group) => {\n      groupedPermissions[group].forEach((perm) => {\n        setValue(`permission_${perm._id}`, checked)\n      })\n    })\n  }\n\n  // Handle Select Group checkbox\n  const handleGroupSelect = (group, e) => {\n    const checked = e.target.checked\n    setGroupSelection((prev) => ({ ...prev, [group]: checked }))\n\n    // Update the form with group's permissions\n    groupedPermissions[group].forEach((perm) => {\n      setValue(`permission_${perm._id}`, checked)\n    })\n  }\n\n  return (\n    <>\n      <div className=\"bg-light min-vh-100\">\n        <ToastContainer />\n        <CContainer className=\"mt-3\">\n          <CRow>\n            <CCol md={6}>\n              <CCard>\n                <CCardHeader>Role Form</CCardHeader>\n                <CCardBody>\n                  <CForm className=\"row g-3\" onSubmit={handleSubmit(onSubmit)}>\n                    <CCol xl={12} md={12}>\n                      <CFormLabel>Role Name</CFormLabel>\n                      <CFormInput\n                        type=\"text\"\n                        placeholder=\"Role Name\"\n                        {...register('name', { required: 'Role Name is required' })}\n                        invalid={!!errors.name}\n                      />\n                      {errors.name && <CFormFeedback> Name is required</CFormFeedback>}\n                    </CCol>\n                    <CCol xl={12} md={12}>\n                      <b>\n                        <CFormLabel>Permission</CFormLabel>\n                      </b>\n                    </CCol>\n\n                    {/* Select All Permissions Checkbox */}\n                    <CFormCheck\n                      type=\"checkbox\"\n                      label=\"Select All Permissions\"\n                      checked={selectAll}\n                      onChange={handleSelectAll}\n                    />\n\n                    {isLoading ? (\n                      <CSpinner />\n                    ) : (\n                      Object.keys(groupedPermissions).map((label) => (\n                        <div key={label}>\n                          {/* Group Select Checkbox */}\n                          <CFormCheck\n                            type=\"checkbox\"\n                            label={`Select All ${label}`}\n                            checked={groupSelection[label]}\n                            onChange={(e) => handleGroupSelect(label, e)}\n                          />\n                          {groupedPermissions[label].map((perm) => (\n                            <CFormCheck\n                              key={perm._id}\n                              type=\"checkbox\"\n                              label={perm.name}\n                              defaultChecked={\n                                state?.editData?.permission?.includes(perm.name) || false\n                              }\n                              {...register(`permission_${perm._id}`, { type: 'boolean' })}\n                            />\n                          ))}\n                        </div>\n                      ))\n                    )}\n\n                    <CCol md={12} className=\"text-center submitButton\">\n                      {isLoading ? (\n                        <CButton disabled>\n                          <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" />\n                          Loading...\n                        </CButton>\n                      ) : (\n                        <CButton type=\"submit\" className=\"AddButton\">\n                          {isUpdate ? 'Update' : 'Add'}\n                        </CButton>\n                      )}\n                    </CCol>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </CContainer>\n      </div>\n    </>\n  )\n}\n\nexport default Roleform\n"],"names":["Roleform","register","handleSubmit","formState","errors","setValue","watch","setError","useForm","isLoading","setIsLoading","useState","navigate","useNavigate","permissions","setPermissions","groupedPermissions","setGroupedPermissions","isUpdate","setIsUpdata","selectAll","setSelectAll","groupSelection","setGroupSelection","state","useLocation","useEffect","async","grouped","getPermission","data","info","reduce","acc","perm","label","name","split","push","groupSelectionInit","Object","keys","group","error","_error$response2","_error$response2$data","toast","response","message","getPermissionData","editData","_id","fetchData","_jsx","_Fragment","children","_jsxs","className","ToastContainer","CContainer","CRow","CCol","md","CCard","CCardHeader","CCardBody","CForm","onSubmit","selectedPermissions","filter","key","startsWith","map","replace","datas","id","permission","changepermission","addRole","_error$response","_error$response$data","console","log","xl","CFormLabel","CFormInput","type","placeholder","required","invalid","CFormFeedback","CFormCheck","checked","onChange","e","target","forEach","concat","CSpinner","handleGroupSelect","prev","_state$editData","_state$editData$permi","defaultChecked","includes","CButton","disabled","component","size"],"sourceRoot":""}